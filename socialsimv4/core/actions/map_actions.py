from socialsimv4.core.action import Action
from socialsimv4.core.event import PublicEvent


class MoveToLocationAction(Action):
    NAME = "move_to_location"
    INSTRUCTION = """- To move to a location: {"action": "move_to_location", "location": "[location_name]"}"""

    def handle(self, action_data, agent, simulator, scenario):
        # This action is handled by the MapScene
        return scenario._handle_move_to_location(action_data, agent, simulator)


class LookAroundAction(Action):
    NAME = "look_around"
    INSTRUCTION = """- To look around and see nearby locations: {"action": "look_around"}"""

    def handle(self, action_data, agent, simulator, scenario):
        return scenario._handle_look_around(action_data, agent, simulator)


class GatherResourceAction(Action):
    NAME = "gather_resource"
    INSTRUCTION = """- To gather resources: {"action": "gather_resource", "resource": "[resource_name]", "amount": [number]}"""

    def handle(self, action_data, agent, simulator, scenario):
        return scenario._handle_gather_resource(action_data, agent, simulator)


class RestAction(Action):
    NAME = "rest"
    INSTRUCTION = """- To rest and recover energy: {"action": "rest"}"""

    def handle(self, action_data, agent, simulator, scenario):
        return scenario._handle_rest(action_data, agent, simulator)


class QuickMoveAction(Action):
    NAME = "quick_move"
    INSTRUCTION = """- To move to adjacent location (low energy cost): {"action": "quick_move", "direction": "north/south/east/west"}"""

    def handle(self, action_data, agent, simulator, scenario):
        if not hasattr(agent, 'map_position'):
            agent.map_position = "village_center"
        
        direction = action_data.get("direction", "").lower()
        direction_map = {
            "north": (0, -1),
            "south": (0, 1),
            "east": (1, 0),
            "west": (-1, 0)
        }
        
        if direction not in direction_map:
            agent.append_env_message("ËØ∑ÊåáÂÆöÊúâÊïàÊñπÂêë: north, south, east, west")
            return False
        
        current_location = scenario.game_map.get_location(agent.map_position)
        if not current_location:
            return False
        
        dx, dy = direction_map[direction]
        new_x = current_location.x + dx
        new_y = current_location.y + dy
        
        target_location = scenario.game_map.get_location_at(new_x, new_y)
        if not target_location:
            agent.append_env_message(f"Âêë{direction}ÊñπÂêëÊ≤°ÊúâÂèØÂà∞ËææÁöÑ‰ΩçÁΩÆ„ÄÇ")
            return False
        
        if agent.energy < 1:
            agent.append_env_message("ËÉΩÈáè‰∏çË∂≥ÔºåÊó†Ê≥ïÁßªÂä®„ÄÇ")
            return False
        
        # ÊâßË°åÂø´ÈÄüÁßªÂä®
        current_location.remove_agent(agent.name)
        target_location.add_agent(agent.name)
        
        agent.map_position = target_location.name
        agent.energy -= 1  # Âø´ÈÄüÁßªÂä®Âè™Ê∂àËÄó1ÁÇπËÉΩÈáè
        
        message = f"{agent.name} Âêë{direction}Âø´ÈÄüÁßªÂä®Âà∞‰∫Ü {target_location.name}"
        simulator.broadcast(PublicEvent(message))
        scenario.log(f"üèÉ {message}")
        
        agent.append_env_message(f"‰Ω†Âø´ÈÄüÁßªÂä®Âà∞‰∫Ü {target_location.name}„ÄÇ{target_location.description}")
        return True


class ExploreAction(Action):
    NAME = "explore"
    INSTRUCTION = """- To explore and discover new areas: {"action": "explore"}"""

    def handle(self, action_data, agent, simulator, scenario):
        if not hasattr(agent, 'map_position'):
            agent.map_position = "village_center"
        
        if agent.energy < 5:
            agent.append_env_message("Êé¢Á¥¢ÈúÄË¶ÅËá≥Â∞ë5ÁÇπËÉΩÈáè„ÄÇ")
            return False
        
        current_location = scenario.game_map.get_location(agent.map_position)
        if not current_location:
            return False
        
        # Êé¢Á¥¢‰ºöÊ∂àËÄóÊõ¥Â§öËÉΩÈáè‰ΩÜÂèØËÉΩÂèëÁé∞ËµÑÊ∫ê
        agent.energy -= 5
        
        # ÈöèÊú∫ÂèëÁé∞‰∏Ä‰∫õ‰ø°ÊÅØÊàñÂ∞èÂ•ñÂä±
        import random
        discoveries = [
            f"‰Ω†Âú® {current_location.name} Âë®Âõ¥ÂèëÁé∞‰∫Ü‰∏Ä‰∫õÊúâË∂£ÁöÑ‰∏úË•øÔºÅ",
            f"Êé¢Á¥¢ËÆ©‰Ω†Êõ¥‰∫ÜËß£ {current_location.name} ÁöÑÁéØÂ¢É„ÄÇ",
            f"‰Ω†Âú®ËøôÈáåÊâæÂà∞‰∫Ü‰∏Ä‰∏™ÈöêËóèÁöÑÂ∞èÂæÑ„ÄÇ",
            f"‰Ω†ÂèëÁé∞‰∫Ü‰∏Ä‰∫õÂÖ≥‰∫éËøô‰∏™Âú∞ÊñπÂéÜÂè≤ÁöÑÁ∫øÁ¥¢„ÄÇ"
        ]
        
        discovery = random.choice(discoveries)
        agent.append_env_message(discovery)
        
        # Â∞èÊ¶ÇÁéáËé∑ÂæóÈ¢ùÂ§ñËµÑÊ∫ê
        if random.random() < 0.3:  # 30%Ê¶ÇÁéá
            bonus_items = ["coin", "herb", "stone"]
            bonus_item = random.choice(bonus_items)
            agent.inventory[bonus_item] = agent.inventory.get(bonus_item, 0) + 1
            agent.append_env_message(f"Êé¢Á¥¢‰∏≠‰Ω†ÂèëÁé∞‰∫Ü 1 ‰∏™ {bonus_item}ÔºÅ")
        
        message = f"{agent.name} Âú® {current_location.name} ËøõË°å‰∫ÜÊé¢Á¥¢"
        simulator.broadcast(PublicEvent(message))
        scenario.log(f"üîç {message}")
        
        return True
